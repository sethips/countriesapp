{"version":3,"sources":["components/Country.js","components/CountryList.js","components/SearchBar.js","components/SearchBox.js","components/RegionFilter.js","components/CountrySort.js","containers/App.js","serviceWorker.js","index.js"],"names":["formatNumber","num","numeral","locale","format","checkCountryCardColor","regionName","Country","_ref","name","region","capitalCity","flag","population","area","_checkCountryCardColo","_checkCountryCardColo2","Object","slicedToArray","fontColor","bgColor","react_default","a","createElement","className","concat","alt","src","CountryList","countries","map","country","i","src_components_Country","key","capital","SearchBar","props","children","SearchBox","searchChange","htmlFor","id","type","placeholder","onChange","RegionFilter","regionChange","value","CountrySort","sortChange","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchField","target","onRegionChange","regionField","onSortChange","sortField","state","_this2","fetch","then","response","json","_this$state","filteredCountries","filter","toLowerCase","includes","sort","b","length","components_SearchBar","components_SearchBox","components_RegionFilter","components_CountrySort","components_CountryList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0890ee5e.chunk.js","sourcesContent":["import React from 'react';\nimport './Country.css';\n\nimport numeral from 'numeral';\nimport 'numeral/locales';\n\n\nconst Country = ({ name, region, capitalCity, flag, population, area }) => {\n\n\tlet [fontColor, bgColor] = checkCountryCardColor(region);\n\t\n\treturn (\n\t\t<div className={`roboto fl w-20 ba b--black-50 br2 pa1 ma2 grow shadow-5 ${fontColor} ${bgColor} `}>\n\t\t  <div className=\"tc\"><img alt={`${name}`} className='flag' src={`${flag}`}/></div>\n\t\t  <h4 className=\" b-m f3 tc\">{name}</h4>\n\t\t  <dl className=\"f6 lh-title mv2\">\n\t\t    <dt className=\"dib b\">Region: </dt>\n\t\t    <dd className=\"dib ml0 pl2\">{region}</dd>\n\t\t  </dl>\n\t\t  <dl className=\"f6 lh-title mv2\">\n\t\t    <dt className=\"dib b\">Capital: </dt>\n\t\t    <dd className=\"dib ml0 pl2\"> {capitalCity}</dd>\n\t\t  </dl>\n\t\t  <dl className=\"f6 lh-title mv2\">\n\t\t    <dt className=\"dib b\">Population: </dt>\n\t\t    <dd className=\"dib ml0 pl2\"> {formatNumber(population)}</dd>\n\t\t  </dl>\t\t  \n\t\t  <dl className=\"f6 lh-title mv2\">\n\t\t    <dt className=\"dib b\">Area: </dt>\n\t\t    <dd className=\"dib ml0 pl2\"> {formatNumber(area)}</dd>\n\t\t  </dl>\t\t  \t\t  \n\t\t</div>\n\t);\n}\n\nconst formatNumber = (num) => {\n\tnumeral.locale('pt-br');\n\treturn numeral(num).format('0,0');\n}\n\nconst checkCountryCardColor = (regionName) => {\n\tswitch (regionName) {\n\t\tcase 'Asia':\n\t\t\treturn ['black', 'bg-light-yellow'];\n\t\tcase 'Europe':\n\t\t\treturn ['yellow', 'bg-dark-blue'];\n\t\tcase 'Africa':\n\t\t\treturn ['light-yellow', 'bg-black'];\n\t\tcase 'Oceania':\n\t\t\treturn ['dark-green', 'bg-yellow'];\n\t\tcase 'Americas':\n\t\t\treturn ['dark-pink', 'bg-light-green'];\n\t\tcase 'Polar':\n\t\t\treturn ['near-black', 'bg-near-white'];\t\t\t\n\t\tdefault:\n\t\t\treturn ['near-black', 'bg-white'];\n\t}\t\n}\n\nexport default Country;","import React from 'react';\nimport Country from './Country';\n\nconst CountryList = ({ countries }) => {\n\treturn (\n\t\t<div className=\"flex flex-wrap\">\n\t\t{ \n\t\tcountries.map((country, i) => {\n\t\t\treturn (<Country key={i} \n\t\t\t\tname={countries[i].name} \n\t\t\t\tregion={countries[i].region}\n\t\t\t\tcapitalCity={countries[i].capital}\n\t\t\t\tflag={countries[i].flag}\n\t\t\t\tpopulation={countries[i].population}\n\t\t\t\tarea={countries[i].area}\n\t\t\t\t/>\n\t\t\t)\n\t\t})  \n\t\t}\n\t\t</div>\n\t)\n}\n\nexport default CountryList;","import React from 'react';\n\nconst SearchBar = (props) => {\n\treturn (\n\t\t<div className=\"roboto pa4 black-80 flex \">\n\t\t\t{props.children}\n\t\t</div>\n\t);\n};\n\nexport default SearchBar;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n\treturn ( \n\t\t<div className=\"ma2 fl w-80\">\n\t\t\t<label htmlFor=\"name\" className=\"f6 b db mb2\">Search by Name</label>\n\t\t\t<input className=\"input-reset ba b--black-20 pa2 mb2 db w-30\"\n\t\t\t\tid=\"name\"\n\t\t\t\ttype='search' \n\t\t\t\tplaceholder='search countries'\n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst RegionFilter = ({ regionChange }) => {\n\n\n\n\treturn ( \n\t\t<div className=\"ma2\">\n\t\t\t<label htmlFor=\"region\" className=\"f6 b db mb2\">Filter by Region</label>\n\t\t\t<select className=\"ba b--black-20 pa2 mb2 db w-100\" name=\"region\" onChange={regionChange}>\n\t\t\t\t<option value=\"\">Filter by Region</option>\n\t            <option value=\"Asia\">Asia</option>\n\t            <option value=\"Europe\">Europe</option>\n\t            <option value=\"Africa\">Africa</option>\n\t            <option value=\"Oceania\">Oceania</option>\n\t            <option value=\"Americas\">Americas</option>\n\t            <option value=\"Polar\">Polar</option>\n\t\t\t</select>\n\t\t</div>\n\t);\n}\n\nexport default RegionFilter;","import React from 'react';\n\nconst CountrySort = ({ sortChange }) => {\n\treturn ( \n\t\t<div className=\"ma2\">\n\t\t\t<label htmlFor=\"region\" className=\"f6 b db mb2\">Sort by</label>\n\t\t\t<select className=\"ba b--black-20 pa2 mb2 db w-100\" name=\"region\" onChange={sortChange}>\n\t            <option value=\"name\">Name</option>\n\t            <option value=\"population\">Population</option>\n\t            <option value=\"area\">Area</option>\n\t\t\t</select>\n\t\t</div>\n\t);\n}\n\nexport default CountrySort;","import React, { Component } from 'react';\n\nimport CountryList from '../components/CountryList';\nimport SearchBar from '../components/SearchBar';\nimport SearchBox from '../components/SearchBox';\nimport RegionFilter from '../components/RegionFilter';\nimport CountrySort from '../components/CountrySort';\n\nimport './App.css';\n\nclass App extends Component {\n\n   constructor() {\n    super();\n    this.state = {\n      countries: [],\n      searchField: '',\n      regionField: '',\n      sortField: 'name'\n    }\n   }\n\n  componentDidMount() {\n    fetch('https://restcountries.eu/rest/v2/all')\n      .then(response => response.json())\n      .then(countries => this.setState({countries: countries})\n    );\n  }\n\n  onSearchChange = (event) => {\n    this.setState({searchField: event.target.value});\n  }\n\n  onRegionChange = (event) => {\n    this.setState({regionField: event.target.value});\n  }\n\n  onSortChange = (event) => {\n    this.setState({sortField: event.target.value});\n  }\n\n  render() {\n    const {countries, searchField, regionField, sortField} = this.state;\n    const filteredCountries = this.state.countries\n      .filter(country => {\n        if ( regionField !== '') {\n          return country.name.toLowerCase().includes(searchField.toLowerCase()) && country.region === regionField  \n        } else {\n          return country.name.toLowerCase().includes(searchField.toLowerCase())\n        }      \n      }).sort((a, b) => {\n        switch (sortField) {\n          case 'area':\n            return a.area < b.area;\n          case 'population':\n            return a.population < b.population;\n          case 'name':\n            return a.name > b.name;\n          default:\n            return 0;\n        }      \n     }\n    );\n\n    return !countries.length ?\n    \n    <h1>Loading...</h1> :\n    (<div >\n        <SearchBar>\n          <SearchBox searchChange={ this.onSearchChange }/>\n          <RegionFilter regionChange={ this.onRegionChange }/>\n          <CountrySort sortChange={ this.onSortChange }/>\n        </SearchBar>\n        <CountryList countries={ filteredCountries }/>\n    </div>);      \n  }  \n\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\n\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}